ESP-ROM:esp32s3-20210327
Build:Mar 27 2021
rst:0x1 (POWERON),boot:0x8 (SPI_FAST_FLASH_BOOT)
SPIWP:0xee
mode:DIO, clock div:1
load:0x3fce2810,len:0x1870
load:0x403c8700,len:0x4
load:0x403c8704,len:0xce8
load:0x403cb700,len:0x2ed8
entry 0x403c8918
[0;32mI (27) boot: ESP-IDF v5.3.2 2nd stage bootloader[0m
[0;32mI (27) boot: compile time Feb 22 2025 22:06:56[0m
[0;32mI (27) boot: Multicore bootloader[0m
[0;32mI (30) boot: chip revision: v0.2[0m
[0;32mI (34) boot: efuse block revision: v1.3[0m
[0;32mI (38) boot.esp32s3: Boot SPI Speed : 80MHz[0m
[0;32mI (43) boot.esp32s3: SPI Mode       : DIO[0m
[0;32mI (48) boot.esp32s3: SPI Flash Size : 2MB[0m
[0;32mI (52) boot: Enabling RNG early entropy source...[0m
[0;32mI (58) boot: Partition Table:[0m
[0;32mI (61) boot: ## Label            Usage          Type ST Offset   Length[0m
[0;32mI (69) boot:  0 nvs              WiFi data        01 02 00009000 00006000[0m
[0;32mI (76) boot:  1 phy_init         RF data          01 01 0000f000 00001000[0m
[0;32mI (84) boot:  2 factory          factory app      00 00 00010000 00100000[0m
[0;32mI (91) boot: End of partition table[0m
[0;32mI (95) esp_image: segment 0: paddr=00010020 vaddr=3c020020 size=0a89ch ( 43164) map[0m
[0;32mI (111) esp_image: segment 1: paddr=0001a8c4 vaddr=3fc92800 size=02bcch ( 11212) load[0m
[0;32mI (114) esp_image: segment 2: paddr=0001d498 vaddr=40374000 size=02b80h ( 11136) load[0m
[0;32mI (123) esp_image: segment 3: paddr=00020020 vaddr=42000020 size=1c774h (116596) map[0m
[0;32mI (150) esp_image: segment 4: paddr=0003c79c vaddr=40376b80 size=0bc68h ( 48232) load[0m
[0;32mI (166) boot: Loaded app from partition at offset 0x10000[0m
[0;32mI (167) boot: Disabling RNG early entropy source...[0m
[0;32mI (178) cpu_start: Multicore app[0m
[0;32mI (188) cpu_start: Pro cpu start user code[0m
[0;32mI (188) cpu_start: cpu freq: 160000000 Hz[0m
[0;32mI (188) app_init: Application information:[0m
[0;32mI (191) app_init: Project name:     USB_Keyboard[0m
[0;32mI (196) app_init: App version:      1[0m
[0;32mI (200) app_init: Compile time:     Feb 22 2025 22:05:06[0m
[0;32mI (206) app_init: ELF file SHA256:  bd9f0b110...[0m
[0;32mI (211) app_init: ESP-IDF:          v5.3.2[0m
[0;32mI (216) efuse_init: Min chip rev:     v0.0[0m
[0;32mI (221) efuse_init: Max chip rev:     v0.99 [0m
[0;32mI (226) efuse_init: Chip rev:         v0.2[0m
[0;32mI (231) heap_init: Initializing. RAM available for dynamic allocation:[0m
[0;32mI (238) heap_init: At 3FC960C8 len 00053648 (333 KiB): RAM[0m
[0;32mI (244) heap_init: At 3FCE9710 len 00005724 (21 KiB): RAM[0m
[0;32mI (250) heap_init: At 3FCF0000 len 00008000 (32 KiB): DRAM[0m
[0;32mI (256) heap_init: At 600FE100 len 00001EE8 (7 KiB): RTCRAM[0m
[0;32mI (264) spi_flash: detected chip: generic[0m
[0;32mI (267) spi_flash: flash io: dio[0m
[0;33mW (271) spi_flash: Detected size(16384k) larger than the size in the binary image header(2048k). Using the size in the binary image header.[0m
[0;32mI (285) sleep: Configure to isolate all GPIO pins in sleep state[0m
[0;32mI (291) sleep: Enable automatic switching of GPIO sleep configuration[0m
[0;32mI (299) main_task: Started on CPU0[0m
[0;32mI (319) main_task: Calling app_main()[0m
[0;32mI (319) example: USB initialization[0m
[0;33mW (319) tusb_desc: No Device descriptor provided, using default.[0m
[0;32mI (319) tusb_desc: 
┌─────────────────────────────────┐
│  USB Device Descriptor Summary  │
├───────────────────┬─────────────┤
│bDeviceClass       │ 0           │
├───────────────────┼─────────────┤
│bDeviceSubClass    │ 0           │
├───────────────────┼─────────────┤
│bDeviceProtocol    │ 0           │
├───────────────────┼─────────────┤
│bMaxPacketSize0    │ 64          │
├───────────────────┼─────────────┤
│idVendor           │ 0x303a      │
├───────────────────┼─────────────┤
│idProduct          │ 0x4008      │
├───────────────────┼─────────────┤
│bcdDevice          │ 0x100       │
├───────────────────┼─────────────┤
│iManufacturer      │ 0x1         │
├───────────────────┼─────────────┤
│iProduct           │ 0x2         │
├───────────────────┼─────────────┤
│iSerialNumber      │ 0x3         │
├───────────────────┼─────────────┤
│bNumConfigurations │ 0x1         │
└───────────────────┴─────────────┘[0m
[0;32mI (489) TinyUSB: TinyUSB Driver installed[0m
[0;32mI (499) example: USB initialization DONE[0m
[0;32mI (499) example: MIDI write task init[0m
[0;32mI (509) example: MIDI read task init[0m
[0;32mI (509) main_task: Returned from app_main()[0m
[0;32mI (789) example: Writing MIDI data 74[0m
[0;32mI (1079) example: Writing MIDI data 78[0m
[0;32mI (1359) example: Writing MIDI data 81[0m
[0;32mI (1649) example: Writing MIDI data 86[0m
[0;32mI (1939) example: Writing MIDI data 90[0m
[0;32mI (2219) example: Writing MIDI data 93[0m
[0;32mI (2509) example: Writing MIDI data 98[0m
[0;32mI (2789) example: Writing MIDI data 102[0m
[0;32mI (3079) example: Writing MIDI data 57[0m
[0;32mI (3369) example: Writing MIDI data 61[0m
[0;32mI (3649) example: Writing MIDI data 66[0m
[0;32mI (3939) example: Writing MIDI data 69[0m
[0;32mI (4219) example: Writing MIDI data 73[0m
[0;32mI (4509) example: Writing MIDI data 78[0m
[0;32mI (4799) example: Writing MIDI data 81[0m
[0;32mI (5079) example: Writing MIDI data 85[0m
[0;32mI (5369) example: Writing MIDI data 88[0m
[0;32mI (5649) example: Writing MIDI data 92[0m
[0;32mI (5939) example: Writing MIDI data 97[0m
[0;32mI (6229) example: Writing MIDI data 100[0m
[0;32mI (6509) example: Writing MIDI data 97[0m
[0;32mI (6799) example: Writing MIDI data 92[0m
[0;32mI (7079) example: Writing MIDI data 88[0m
[0;32mI (7369) example: Writing MIDI data 85[0m
[0;32mI (7659) example: Writing MIDI data 81[0m
[0;32mI (7939) example: Writing MIDI data 78[0m
[0;32mI (8229) example: Writing MIDI data 74[0m
[0;32mI (8509) example: Writing MIDI data 69[0m
[0;32mI (8799) example: Writing MIDI data 66[0m
[0;32mI (9089) example: Writing MIDI data 62[0m
[0;32mI (9369) example: Writing MIDI data 57[0m
[0;32mI (9659) example: Writing MIDI data 62[0m
[0;32mI (9939) example: Writing MIDI data 66[0m
[0;32mI (10229) example: Writing MIDI data 69[0m
[0;32mI (10519) example: Writing MIDI data 74[0m
[0;32mI (10799) example: Writing MIDI data 78[0m
[0;32mI (11089) example: Writing MIDI data 81[0m
[0;32mI (11369) example: Writing MIDI data 86[0m
[0;32mI (11659) example: Writing MIDI data 90[0m
[0;32mI (11949) example: Writing MIDI data 93[0m
[0;32mI (12229) example: Writing MIDI data 97[0m
[0;32mI (12519) example: Writing MIDI data 102[0m
[0;32mI (12799) example: Writing MIDI data 97[0m
[0;32mI (13089) example: Writing MIDI data 93[0m
[0;32mI (13379) example: Writing MIDI data 90[0m
[0;32mI (13659) example: Writing MIDI data 85[0m
[0;32mI (13949) example: Writing MIDI data 81[0m
[0;32mI (14229) example: Writing MIDI data 78[0m
[0;32mI (14519) example: Writing MIDI data 73[0m
[0;32mI (14809) example: Writing MIDI data 68[0m
[0;32mI (15089) example: Writing MIDI data 64[0m
[0;32mI (15379) example: Writing MIDI data 61[0m
[0;32mI (15659) example: Writing MIDI data 56[0m
[0;32mI (15949) example: Writing MIDI data 61[0m
[0;32mI (16239) example: Writing MIDI data 64[0m
[0;32mI (16519) example: Writing MIDI data 68[0m
