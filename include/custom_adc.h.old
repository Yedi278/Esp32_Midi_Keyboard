#ifndef CUSTOM_ADC_H
#define CUSTOM_ADC_H

#include <stdint.h>
#include <stdio.h>
#include "driver/adc.h"
#include "esp_adc_cal.h"

#include "keyboard_layout.h"

#if CONFIG_IDF_TARGET_ESP32
#define ADC_CALI_SCHEME     ESP_ADC_CAL_VAL_EFUSE_VREF
#elif CONFIG_IDF_TARGET_ESP32S2
#define ADC_CALI_SCHEME     ESP_ADC_CAL_VAL_EFUSE_TP
#elif CONFIG_IDF_TARGET_ESP32C3
#define ADC_CALI_SCHEME     ESP_ADC_CAL_VAL_EFUSE_TP
#elif CONFIG_IDF_TARGET_ESP32S3
#define ADC_CALI_SCHEME     ESP_ADC_CAL_VAL_EFUSE_TP_FIT
#endif

#define ADC_ATTEN           ADC_ATTEN_DB_11
#define ADC_WIDTH           ADC_WIDTH_BIT_12
#define ADC_UNIT            ADC_UNIT_1
#define ADC_VREF            1100

esp_adc_cal_characteristics_t adc1;
bool adc1_calibrated = false;

static bool custom_adc_cal(esp_adc_cal_characteristics_t* adc1) {
    
    printf("Custom ADC CALIBRATION\n");

    esp_err_t err = esp_adc_cal_check_efuse(ADC_CALI_SCHEME);
    switch (err)
    {
    case ESP_OK:
        printf("Calibration supported\n");
        break;

    case ESP_ERR_NOT_SUPPORTED:
        printf("Calibration not supported\n");
        return false;
        break;

    default:
        printf(esp_err_to_name(err));
        printf("\n");
        return false;
        break;
    }

    esp_adc_cal_value_t cal_val = esp_adc_cal_characterize(ADC_UNIT, ADC_ATTEN, ADC_WIDTH, ADC_VREF, adc1);

    if(cal_val == ESP_ADC_CAL_VAL_EFUSE_VREF){
        printf("eFuse Vref used for characterization\n");
    }
    if(cal_val == ESP_ADC_CAL_VAL_EFUSE_TP){
        printf("Two Point used for characterization\n");
    }
    if(cal_val == ESP_ADC_CAL_VAL_DEFAULT_VREF){
        printf("Default Vref used for characterization\n");
    }

    printf("ADC calibration successfull\n");
    // printf("ADC1\t a: %ld\t b: %ld\n", adc1.coeff_a, adc1.coeff_b);
    return true;
}

void custom_adc_init(){
    extern esp_adc_cal_characteristics_t adc1;
    extern bool adc1_calibrated;

    adc1_config_width(ADC_WIDTH);

    for(int i=0; i<KEYS_N; i++){
        adc1_config_channel_atten(key_pins[i], ADC_ATTEN);
    }

    bool valid = custom_adc_cal(&adc1);
    if (!valid) {
        printf("ADC calibration failed\n");
        adc1_calibrated = false;
        return;
    }
    
    adc1_calibrated = true;
}


#endif // CUSTOM_ADC_H